// Generated by CoffeeScript 2.3.1
var cousinRE, dirname, join, parentRE, relative, sep;

({sep} = require('path'));

parentRE = /^((?:\.\.\/)*\.\.)$/;

cousinRE = /^((?:\.\.\/)+)(.+)?$/;

// super fast relative path resolver
relative = function(file, ref) {
  var dir, id;
  // parent
  if (ref.length === 1) {
    return dirname(file);
  // sibling or nephew
  } else if (ref[1] === sep) {
    return join(dirname(file), ref.slice(2));
  // grand-parent
  } else if (id = parentRE.exec(ref)) {
    return dirname(file, 1 + (id[1].length + 1) / 3);
  // cousin or uncle
  } else if (id = cousinRE.exec(ref)) {
    dir = dirname(file, 1 + id[1].length / 3);
    if (dir !== null) {
      return join(dir, id[2]);
    } else {
      return null;
    }
  } else {
    // invalid path
    return null;
  }
};

Object.defineProperty(relative, 'default', {
  value: relative
});

module.exports = relative;

join = function(a, b) {
  return b && (a && (a + sep + b) || b) || a;
};

// This assumes `file` never ends with a path separator.
// Returns an empty string if no parent directory exists.
dirname = function(file, n) {
  var i;
  if (!n || n === 1) {
    i = file.lastIndexOf(sep);
    if (i === -1) {
      return '';
    }
  } else {
    i = file.length;
    while (--n !== -1) {
      i = file.lastIndexOf(sep, i - 1);
      if (i === -1) {
        if (n === 0) {
          return '';
        }
        return null;
      }
    }
  }
  if (i === 0) {
    return '/';
  } else {
    return file.slice(0, i);
  }
};
